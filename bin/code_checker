#!/usr/bin/env ruby

require 'optparse'
require 'code_checker'

options = {}
OptionParser.new do |opts|
	opts.banner = ["Run with -f to check a single file.",
                   "  e.g. code_checker -f index.html",
                   "Run with -I to specify urls to check HTML",
                   "  e.g. code_checker -I urls_file.txt",
                   "Run with -r and -I to specify root host, URL file will have relative paths",
                   "  e.g. code_checker -r localhost:3000 -I urls_file.txt",
                   "Run with -u and -p to specify username and password for URLs",
                   "  e.g. code_checker -r project.ryukyu-i.co.jp -u ryukyu -p my_password -I urls_file.txt",
                   "Run with -H to specify local HTML folder(s) to check",
                   "  e.g. code_checker -H views",
                   "  e.g. code_checker -H views/contacts,views/top",
                   "Run with -S to specify local SASS folder(s) to check",
                   "  e.g. code_checker -S _dev/_sass",
                   "Run with -x to exclude certain files",
                   "  e.g. code_checker -H views -x test.html,scrap.html",
                   "Run with -X to exclude certain folders",
                   "  e.g. code_checker -S _dev/_sass -X _bootstrap,_animate",
                   "Run with both -I and -S, or -H and -S to do cross checking between HTML and SASS",
                   "  e.g. code_checker -I urls_file.txt -S _dev/_sass",
                   "Run with -I and -E to specify a custom folder to export HTML, default folder is \"tested\"",
                   "  e.g. code_checker -I urls_file.txt -E temp",
                   "Run with -o to output results to a file",
                   "  e.g. code_checker -I urls_file.txt -o log.txt",
                   "Run with -V to specify validators to run",
                   "  e.g. code_checker -I urls_file.txt -V ryukyu",
                   "  e.g. code_checker -I urls_file.txt -V w3c",
                   "  e.g. code_checker -I urls_file.txt -V ryukyu,w3c (by default this is run)",
                   " ",
                   "Option Descriptions:"].join("\n")

    opts.on('-r', '--roothost url', 'URL of the root host') do |url|
        options[:roothost] = url
    end

    opts.on('-u', '--user name', 'Username for url file') do |name|
        options[:username] = name
    end

    opts.on('-p', '--password pw', 'Password for url file') do |name|
        options[:password] = name
    end

    opts.on('-I', '--import urls_file', 'Import URL list file name') do |name|
        options[:urlfile] = name
    end

    opts.on('-S', '--sass folderpaths', 'SASS folder paths') do |path|
        options[:sass_folders] = path
    end

    opts.on('-H', '--html folderpaths', 'HTML folder paths') do |path|
        options[:html_folders] = path
    end

	opts.on('-f', '--file filename', 'Input file name') do |name|
		options[:infile] = name;
	end

    opts.on('-i', '--import_folder name', 'Import folder name') do |name|
        options[:import_folder] = name
    end

    opts.on('-x', '--exclude_files files', 'File to exclude, allows * wildcards') do |names|
        options[:exclude_files] = names
    end

    opts.on('-X', '--exclude_folders folders', 'Folders to exclude, allows * wildcards') do |names|
        options[:exclude_folders] = names
    end

    opts.on('-V', '--validators names', 'Validators to run (default: ryukyu,w3c)') do |names|
        options [:validators] = names
    end

    opts.on('-o', '--output_file filename', 'Output file name') do |name|
        options[:output_file] = name
    end

	opts.on('-h', '--help', 'Displays Help') do
		puts opts
		exit
	end    
end.parse!

if options == {}
    puts 'Run "code_checker -h" to view required and optional arguments'
    exit
end

if options[:roothost] and options[:urlfile] == nil
    puts 'Must provide -I urlfile option when using -r option'
    puts 'Run "code_checker -h" to view examples'
    exit
end

if options[:urlfile] and options[:html_folders]
    puts "Can't specify both -I and -H option.  You can only use one or the other."
    puts 'Run "code_checker -h" to view examples'
end

#Clean options
options[:exclude_files] = options[:exclude_files].split(/\s*,\s*/) if options[:exclude_files] != nil
options[:exclude_folders] = options[:exclude_folders].split(/\s*,\s*/) if options[:exclude_folders] != nil
options[:validators] = options[:validators].split(/\s*,\s*/) if options[:validators] != nil
options[:html_folders] = options[:html_folders].split(/\s*,\s*/) if options[:html_folders] != nil
options[:sass_folders] = options[:sass_folders].split(/\s*,\s*/) if options[:sass_folders] != nil

#puts options
CodeChecker.clear_output_file(options[:output_file])

if infile = options[:infile]
    validated_code_file = CodeChecker.check_file(infile, options)
    CodeChecker.display_console(validated_code_file, options[:output_file])
end

validated_html = nil
html_folders = nil

html_folders = []
if options[:html_folders]
    html_folders = options[:html_folders]
elsif options[:urlfile]
    html_folders << CodeChecker.import_html(options[:urlfile], options)
end

if html_folders
    validated_html = CodeChecker.check_html(html_folders, options)
end

validated_sass = nil
if options[:sass_folders]
    validated_sass = CodeChecker.check_sass(options[:sass_folders], options)    
end

if validated_html and validated_sass
    CodeChecker.cross_check_html_sass(validated_html,validated_sass)
end

CodeChecker.display_all_console(validated_html,options[:output_file])
CodeChecker.display_all_console(validated_sass,options[:output_file])