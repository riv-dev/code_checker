#!/usr/bin/env ruby

require 'optparse'
require 'code_checker'


options = {}
OptionParser.new do |opts|
	opts.banner = ["Run with -f to check a single file.",
                   "  e.g. code_checker -f index.html",
                   "Run with -F to check all files within the folder.",
                   "  e.g. code_checker -F views",
                   "Run with -F . to check all files in current directory and sub-directories.",
                   "  e.g. code_checker -F .",
                   "Run with -t to specify file types to check.",
                   "  e.g. code_checker -F . -t html,hbs",
                   "  e.g. code_checker -F . -t html,php,ejs",
                   "Run with -x to exclude certain files, uses * wildcard",
                   "  e.g. code_checker -F . -x *.ejs,*index*",
                   "Run with -X to exclude certain folders, uses * wildcard",
                   "  e.g. code_checker -F . -X node_modules,.git*",
                   " ",
                   "Option Descriptions:"].join("\n")

	opts.on('-f', '--file filename', 'Input file name') do |name|
		options[:infile] = name;
	end

    opts.on('-F', '--folder foldername', 'Input folder name') do |name|
        options[:infolder] = name;
    end

    opts.on('-t', '--types (html, hbs, php, ejs)', 'File types to check') do |types|
        options[:types] = types
    end

    opts.on('-x', '--exclude_files files', 'File to exclude, allows * wildcards') do |names|
        options[:exclude_files] = names
    end

    opts.on('-X', '--exclude_folders folders', 'Folders to exclude, allows * wildcards') do |names|
        options[:exclude_folders] = names
    end

	opts.on('-h', '--help', 'Displays Help') do
		puts opts
		exit
	end    
end.parse!

if options == {}
    puts 'Run "code_checker -h" to view required and optional arguments'
    exit
end

#puts options

if infile = options[:infile]
    CodeChecker.check(infile)
end

if infolder = options[:infolder]
    check_folder_options = {}
    check_folder_options[:types] = options[:types].split(/\s*,\s*/) if options[:types] != nil
    check_folder_options[:exclude_files] = options[:exclude_files].split(/\s*,\s*/) if options[:exclude_files] != nil
    check_folder_options[:exclude_folders] = options[:exclude_folders].split(/\s*,\s*/) if options[:exclude_folders] != nil
    CodeChecker.check_folder(infolder, check_folder_options)
end