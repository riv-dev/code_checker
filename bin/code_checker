#!/usr/bin/env ruby

require 'optparse'
require 'code_checker'


options = {}
OptionParser.new do |opts|
	opts.banner = ["Run with -f to check a single file.",
                   "  e.g. code_checker -f index.html",
                   "Run with -F to check all files within the folder.",
                   "  e.g. code_checker -F views",
                   "  e.g. code_checker -F _dev/_sass,views",
                   "Run with -F . to check all files in current directory and sub-directories.",
                   "  e.g. code_checker -F .",
                   "Run with -t to specify file types to check.",
                   "  e.g. code_checker -F . -t html,hbs",
                   "  e.g. code_checker -F . -t html,php,ejs",
                   "Run with -x to exclude certain files, uses * wildcard",
                   "  e.g. code_checker -F . -x *.ejs,*index*",
                   "Run with -X to exclude certain folders, uses * wildcard",
                   "  e.g. code_checker -F . -X node_modules,.git*",
                   "Run with -o to output results to a file",
                   "  e.g. code_checker -F . -o log.txt",
                   "Run with -U to give a URL list file to check",
                   "  e.g. code_checker -U urls_to_check.txt",
                   "Run with -u and -p to specify username and password for authentication",
                   "  e.g. code_checker -U urls_to_check.txt -u admin -p my_password",
                   "Run with -E to export HTML files from -U into a folder",
                   "  e.g. code_checker -U urls_to_check.txt -E checked",
                   " ",
                   "Option Descriptions:"].join("\n")

	opts.on('-f', '--file filename', 'Input file name') do |name|
		options[:infile] = name;
	end

    opts.on('-F', '--folders foldernames', 'Input folder names') do |names|
        options[:infolders] = names;
    end

    opts.on('-U', '--urls file', 'URL list file name') do |name|
        options[:urlfile] = name
    end

    opts.on('-u', '--user name', 'Username for url file') do |name|
        options[:username] = name
    end

    opts.on('-p', '--password pw', 'Password for url file') do |name|
        options[:password] = name
    end

    opts.on('-E', '--export folder', 'Export folder name') do |name|
        options[:export_folder] = name
    end

    opts.on('-t', '--types (html, hbs, php, ejs)', 'File types to check') do |types|
        options[:types] = types
    end

    opts.on('-x', '--exclude_files files', 'File to exclude, allows * wildcards') do |names|
        options[:exclude_files] = names
    end

    opts.on('-X', '--exclude_folders folders', 'Folders to exclude, allows * wildcards') do |names|
        options[:exclude_folders] = names
    end

    opts.on('-o', '--output_file filename', 'Output file name') do |name|
        options[:output_file] = name
    end

	opts.on('-h', '--help', 'Displays Help') do
		puts opts
		exit
	end    
end.parse!

if options == {}
    puts 'Run "code_checker -h" to view required and optional arguments'
    exit
end

#puts options

if infile = options[:infile]
    check_file_options = {}
    check_file_options[:output_file] = options[:output_file]
    CodeChecker.check(infile, check_file_options)
end

if infolders = options[:infolders]
    check_folder_options = {}
    check_folder_options[:types] = options[:types].split(/\s*,\s*/) if options[:types] != nil
    check_folder_options[:exclude_files] = options[:exclude_files].split(/\s*,\s*/) if options[:exclude_files] != nil
    check_folder_options[:exclude_folders] = options[:exclude_folders].split(/\s*,\s*/) if options[:exclude_folders] != nil
    check_folder_options[:output_file] = options[:output_file]
    check_folders = infolders.split(/\s*,\s*/)
    CodeChecker.check_folder(check_folders, check_folder_options)
end

if urlfile = options[:urlfile]
    check_urls_options = {}
    check_urls_options[:username] = options[:username]
    check_urls_options[:password] = options[:password]
    check_urls_options[:export_folder] = options[:export_folder]
    check_urls_options[:output_file] = options[:output_file]
    CodeChecker.check_urls_file(urlfile, check_urls_options)
end