#!/usr/bin/env ruby

require 'optparse'
require 'code_checker'

options = {}
OptionParser.new do |opts|
	opts.banner = ["Run with -f to check a single file.",
                   "  e.g. code_checker -f index.html",
                   "Run with -I to specify urls to check HTML from file",
                   "  e.g. code_checker -I urls_file.txt",
                   "Run with -l to specify urls to check HTML on command line",
                   " e.g. code_checker -l /,/tower.php,/restaurant.php",
                   "Run with -r and -I to specify root host, URL file will have relative paths",
                   "  e.g. code_checker -r localhost:3000 -I urls_file.txt",
                   "Run with -u and -p to specify username and password for URLs",
                   "  e.g. code_checker -r project.ryukyu-i.co.jp -u ryukyu -p my_password -I urls_file.txt",
                   "Run with -H to specify local HTML folder(s) to check",
                   "  e.g. code_checker -H views",
                   "  e.g. code_checker -H views/contacts,views/top",
                   "Run with -S to specify local SASS folder(s) to check",
                   "  e.g. code_checker -S _dev/_sass",
                   "Run with -g to specify github repository for SASS",
                   "  e.g. code_checker -g https://www.github.com/my_repo -S _dev/_sass",
                   "Run with -U and -P to specify github username and password",
                   "  e.g. code_checker -g https://www.github.com/my_repo -S _dev/_sass -U my_git_username -P my_git_password", 
                   "Run with -x to exclude certain files",
                   "  e.g. code_checker -H views -x test.html,scrap.html",
                   "Run with -X to exclude certain folders",
                   "  e.g. code_checker -S _dev/_sass -X _bootstrap,_animate",
                   "Run with both -I and -S, or -H and -S to do cross checking between HTML and SASS",
                   "  e.g. code_checker -I urls_file.txt -S _dev/_sass",
                   "Run with -O to specify code_checker output folder. Default folder is 'code_checker_output'",
                   "  e.g. code_checker -I urls_file.txt -O output_folder",
                   "Run with -W to run for web API, output is in JSON format'",
                   "  e.g. code_checker -I urls_file.txt -W",
                   "Run with -V to specify validators to run",
                   "  e.g. code_checker -I urls_file.txt -V ryukyu",
                   "  e.g. code_checker -I urls_file.txt -V w3c",
                   "  e.g. code_checker -I urls_file.txt -V achecker",
                   "  e.g. code_checker -I urls_file.txt -V ryukyu,w3c,achecker (by default this is run)",
                   " ",
                   "Option Descriptions:"].join("\n")

    opts.on('-r', '--roothost url', 'URL of the root host') do |url|
        options[:roothost] = url
    end

    opts.on('-u', '--user name', 'Username for url file') do |name|
        options[:username] = name
    end

    opts.on('-p', '--password pw', 'Password for url file') do |name|
        options[:password] = name
    end

    opts.on('-I', '--import urls_file', 'Import URL list file name') do |name|
        options[:urlfile] = name
    end

    opts.on('-l', '--list urls_list', 'List URL list') do |list|
        options[:url_list] = list 
    end

    opts.on('-S', '--sass folderpaths', 'SASS folder paths') do |path|
        options[:sass_folders] = path
    end

    opts.on('-g', '--github url', 'Github SASS source URL') do |path|
        options[:github_url] = path
    end

    opts.on('-U', '--github_username username', 'Github Username') do |username|
        options[:github_username] = username
    end

    opts.on('-P', '--github_password password', 'Github Password') do |password|
        options[:github_password] = password 
    end

    opts.on('-H', '--html folderpaths', 'HTML folder paths') do |path|
        options[:html_folders] = path
    end

	opts.on('-f', '--file filename', 'Input file name') do |name|
		options[:infile] = name;
	end

    opts.on('-x', '--exclude_files files', 'File to exclude, allows * wildcards') do |names|
        options[:exclude_files] = names
    end

    opts.on('-X', '--exclude_folders folders', 'Folders to exclude, allows * wildcards') do |names|
        options[:exclude_folders] = names
    end

    opts.on('-V', '--validators names', 'Validators to run (default: ryukyu,w3c)') do |names|
        options [:validators] = names
    end

    opts.on('-O', '--output_folder foldername', 'Output folder name') do |name|
        options[:output_folder] = name
    end

    opts.on('-N', '--no_export', 'Do not export results') do
        options[:no_export] = true
    end

    opts.on('-W', '--web_api', 'Turn on when running with a web API') do
        options[:web_api] = true
    end   

	opts.on('-h', '--help', 'Displays Help') do
		puts opts
		exit
	end    
end.parse!

if options == {}
    puts 'Run "code_checker -h" to view required and optional arguments'
    exit
end

if options[:roothost] and options[:urlfile] == nil and options[:url_list] == nil
    puts 'Must provide -I urlfile option when using -r option OR'
    puts 'Must provide -l url_list option when using -r option'
    puts 'Run "code_checker -h" to view examples'
    exit
end

if options[:urlfile] and options[:html_folders]
    puts "Can't specify both -I and -H option.  You can only use one or the other."
    puts 'Run "code_checker -h" to view examples'
end

#Clean options
options[:exclude_files] = options[:exclude_files].split(/\s*,\s*/) if options[:exclude_files] != nil
options[:exclude_folders] = options[:exclude_folders].split(/\s*,\s*/) if options[:exclude_folders] != nil
options[:validators] = options[:validators].split(/\s*,\s*/) if options[:validators] != nil
options[:url_list] = options[:url_list].split(/\s*,\s*/) if options[:url_list] != nil
options[:html_folders] = options[:html_folders].split(/\s*,\s*/) if options[:html_folders] != nil
options[:sass_folders] = options[:sass_folders].split(/\s*,\s*/) if options[:sass_folders] != nil
options[:output_folder] = "code_checker_output" if options[:output_folder] == nil

#puts options
CodeChecker.clear_output_folder(options[:output_folder])

if infile = options[:infile]
    validated_code_file = CodeChecker.check_file(infile, options)
    CodeChecker.display_console(validated_code_file)
    CodeChecker.export_result(validated_code_file, options[:output_folder])
end

validated_html = nil
html_folders = nil

html_folders = []
if options[:html_folders]
    html_folders = options[:html_folders] #check local HTML folders
elsif options[:urlfile] or options[:url_list]
    html_folders << CodeChecker.import_html(options) #import HTML into local folder
end

if html_folders and !html_folders.empty?
    validated_html = CodeChecker.check_html(html_folders, options) #check the local or imported HTML
end

sass_folders = []
if options[:github_url]
    if options[:github_username] and options[:github_username]
        sass_folders = CodeChecker.import_sass(options)
    else
        puts "Error, need to specify github username and password"
        exit
    end
elsif options[:sass_folders]
    sass_folders = options[:sass_folders]
end

validated_sass = nil
if sass_folders and !sass_folders.empty?
    validated_sass = CodeChecker.check_sass(sass_folders, options)    
end

if validated_html and validated_sass
    CodeChecker.cross_check_html_sass(validated_html,validated_sass,options)
end

if options[:web_api]
    CodeChecker.display_all_html_and_sass_json(validated_html,validated_sass)
    options[:no_export] = true
else
    CodeChecker.display_all_console(validated_html)
    CodeChecker.display_all_console(validated_sass)
end

if options[:no_export] == nil or !options[:no_export]
    CodeChecker.export_all_results(validated_html, options[:output_folder])
    CodeChecker.export_all_results(validated_sass, options[:output_folder])
end

#Clean up all folders
if options[:web_api]
    CodeChecker.remove_imported(options)
end

